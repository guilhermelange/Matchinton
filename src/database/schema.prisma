generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         BigInt      @id @default(autoincrement())
  name       String
  username   String
  password   String
  phone      String
  type       UserType    @default(USER)
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  email      String      @default("")
  team       team[]
  user_team  user_team[]

  @@map("user")
}

model category {
  id                   BigInt                 @id @default(autoincrement())
  name                 String
  max_age              Int
  min_age              Int
  competition_category competition_category[]
}

model competition {
  id                   BigInt                 @id @default(autoincrement())
  name                 String
  start_date           DateTime               @db.Date
  end_date             DateTime               @db.Date
  type                 requesttype            @default(MIS)
  competition_category competition_category[]
  duo_request          duo_request[]
}

model competition_category {
  category_id    BigInt
  competition_id BigInt
  id             BigInt      @id @default(autoincrement())
  category       category    @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  competition    competition @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model duo_request {
  id                                 BigInt        @id @default(autoincrement())
  player1                            BigInt
  player2                            BigInt
  competition_id                     BigInt
  status                             RequestStatus
  competition                        competition   @relation(fields: [competition_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_competition_duo_request")
  player_origin                      player        @relation("duo_request_player1Toplayer", fields: [player1], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_player1")
  player_target                      player        @relation("duo_request_player2Toplayer", fields: [player2], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_player2")
}

model player {
  id                                      BigInt        @id @default(autoincrement())
  name                                    String
  observation                             String
  birth_date                              DateTime      @db.Date
  photo                                   String
  city                                    String
  state                                   String
  team_id                                 BigInt
  created_at                              DateTime      @default(now()) @db.Timestamp(6)
  updated_at                              DateTime      @default(now()) @db.Timestamp(6)
  gender                                  UserGender    @default(MAS)
  duo_requests                            duo_request[] @relation("duo_request_player1Toplayer")
  duo_requests_target                     duo_request[] @relation("duo_request_player2Toplayer")
  team                                    team          @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model team {
  id        BigInt      @id @default(autoincrement())
  name      String
  user_id   BigInt
  player    player[]
  user      User        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_team user_team[]
}

model user_team {
  user_id BigInt
  team_id BigInt
  team    team   @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user    User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, team_id])
}

enum UserType {
  USER
  ADMIN
}

enum UserGender {
  MAS
  FEM
}

enum requesttype {
  MAS
  FEM
  MIS
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DENIED
  CANCELED
  DISREGARDED
}
